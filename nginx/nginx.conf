worker_processes auto;
error_log /var/log/nginx/nginxerror.log debug;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    resolver 10.0.2.3 valid=30s;

    # Enhanced logging format to better track request flow
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" '
                      'forwarded_for="$http_x_forwarded_for" '
                      'real_ip="$remote_addr" '
                      'x_real_ip="$http_x_real_ip" '
                      'request_time=$request_time';
    
    # Structured logging for Grafana/Loki integration
    log_format json_combined escape=json
        '{'
          '"timestamp":"$time_iso8601",'
          '"remote_addr":"$remote_addr",'
          '"request":"$request",'
          '"status":$status,'
          '"body_bytes_sent":$body_bytes_sent,'
          '"http_referer":"$http_referer",'
          '"http_user_agent":"$http_user_agent",'
          '"request_time":$request_time,'
          '"upstream_response_time":"$upstream_response_time",'
          '"component":"nginx",'
          '"logtype":"access",'
          '"service_name":"timeherenow-api"'
        '}';
    
    access_log /var/log/nginx/nginxaccess.log json_combined;

    # TLS configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Add header size limits
    large_client_header_buffers 4 8k;  # 4 buffers of 8k each (total 32k)
    client_header_buffer_size 1k; 
    
    # Protect against large payload attacks (similar to express-content-length-validator)
    client_max_body_size 1M;  # Global limit for all requests
    client_body_timeout 10s;  # Timeout for receiving the request body
    client_body_buffer_size 128k;  # Buffer size for client request body
    
    # Security headers (aligned with Helmet recommendations)
    # Remove X-Powered-By header (already handled in proxy_hide_header below)
    server_tokens off;  # Hide nginx version
    
    # Common security headers for all responses
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "0" always;  # Disable XSS Auditor as recommended by Helmet
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; font-src 'self'; connect-src 'self' https://api.timeherenow.com:8443; frame-ancestors 'self'; form-action 'self'; base-uri 'self'; object-src 'none'" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;
    add_header Origin-Agent-Cluster "?1" always;
    add_header X-DNS-Prefetch-Control "off" always;
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header X-Download-Options "noopen" always;

    # CORS origin mapping
    map $http_origin $cors_origin {
        default $http_origin;
        "https://timeherenow.rodit.org:2443" "$http_origin";
        "https://mainnet.rodit.org:6443" "$http_origin";
        "https://purchase.timeherenow.com:4443" "$http_origin";
        "https://api.timeherenow.com:9443" "$http_origin";
    }

    server {
        listen 8443 ssl;
        http2 on;
        server_name api.timeherenow.com;
        ssl_certificate /app/certs/fullchain.pem;
        ssl_certificate_key /app/certs/privkey.pem;

        # Security: prevent exposure of sensitive headers
        proxy_hide_header X-Powered-By;
        
        location / {
            # Default limit for API requests
            client_max_body_size 1M;
            
            # Handle CORS preflight
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $cors_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, Origin, X-Requested-With, Accept, X-RODIT-Token' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain charset=utf-8';
                return 204;
            }

            # Add CORS headers for actual requests
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            proxy_pass http://timeherenow-container:8080;
            proxy_http_version 1.1;

            # Proxy headers with explicit order
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            proxy_set_header User-Agent $http_user_agent;

            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Error handling
            proxy_intercept_errors on;
            error_page 413 = @payload_too_large;  # Custom error for payload too large
            error_page 502 504 = @handle_error;
        }

        # Add specific limits for different API endpoints based on their needs
        # Example for an endpoint that needs to handle larger files
        location /api/uploads/ {
            client_max_body_size 10M;  # Allow larger uploads for this specific endpoint
            
            # Other directives same as the root location
            proxy_pass http://timeherenow-container:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header User-Agent $http_user_agent;
        }

        # Health check endpoint - proxy to backend for full status
        location /health {
            access_log off;
            proxy_pass http://timeherenow-container:8080;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Short timeout for health checks
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Custom error response for payload too large
        location @payload_too_large {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Type' 'application/json' always;
            return 413 '{"error": "Payload too large", "message": "The request payload exceeds the allowed size limit"}';
        }

        location @handle_error {
            add_header 'Access-Control-Allow-Origin' $cors_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            return 502;
        }
    }
}